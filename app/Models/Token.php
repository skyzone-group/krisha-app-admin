<?php

namespace App\Models;

use App\Models\Client;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Str;
use phpDocumentor\Reflection\Types\This;
use Illuminate\Support\Facades\Cache;
use Carbon\Carbon;

class Token extends Model
{
//    use SoftDeletes;
    protected $fillable = [
        'client_id',
        'token',
        'fcm_token',
        'token_expires_at',
        'is_active',
        'app_lang',
        'os_type',
        'os_version',
        'app_version',
        'device',
        'ip',
        'last_seen_at',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($token){
            Cache::forget($token->token);
        });
        self::deleted(function ($token){
            Cache::forget($token->token);
        });
        self::updated(function ($token){
            Cache::forget($token->token);
        });

    }

    public static function getClientByToken()
    {
        $token = self::where('token',request()->bearerToken())->first();
        return $token->client ?? null;
    }


    public static function check($token)
    {
        $data = Cache::remember($token, 3600, function () use ($token) {
            return Token::where('token',$token)
                ->with('client')
                ->where('token_expires_at','>',Carbon::now())
                ->first();
        });

        return !is_null($data);
    }

    public static function expire($token)
    {
        self::where('token',$token)->update([
            'token_expires_at' => Carbon::now()->subMinutes(3)
        ]);
        return true;
    }

    public function client()
    {
        return $this->belongsTo(Client::class);
    }

    public static function getByToken($token)
    {
        $data = Token::where('token',$token)
            ->with('client')
            ->where('token_expires_at','>',Carbon::now())
            ->first();

        if($data) return $data->client;
        else return null;
    }

    public function me()
    {
        $user = $this->client;
        return [
            'id' => $user->id,
            'fullname' => $user->fullname,
            'avatar' => $user->avatar,
            'phone' => $user->phone,
            'type' => $user->type,
            'verified' => $user->verified,
            'access_token' => $this->token,
            'token_expires_at' => $this->token_expires_at
        ];
    }

    public function auth()
    {
        $user = $this->client;
        return (object)[
            'id' => $user->id,
            'fullname' => $user->fullname,
            'avatar' => $user->avatar,
            'phone' => $user->phone,
            'type' => $user->type,
            'verified' => $user->verified,
            'access_token' => $this->token,
            'token_expires_at' => $this->token_expires_at
        ];
    }


//    public static function generateToken(int $user_id):self
//    {
//        $user = ApiUser::find($user_id);
//        return self::create([
//            'api_user_id' => $user_id,
//            'token' => Str::uuid(),
//            'token_expires_at' => date('Y-m-d H:i:s',strtotime("+ $user->token_valid_period days")),
//        ]);
//    }
//
//    public function toggleTokenActivation()
//    {
//        $this->is_active = !$this->is_active;
//        $this->save();
//        return $this->is_active;
//    }
//
    public function forget()
    {
        $this->delete();
    }
}
